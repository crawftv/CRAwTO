def numeric_columns_distribution_report(self):
    self.distribution_r()


#         print(
#             sns.PairGrid(
#                 self.data, x_vars=self.numeric_features, y_vars=self.target
#             ).map(sns.distplot)
#         )


def distribution_r(self):
    display(
        pandas.DataFrame(
            [
                self.distribution_fit(self.data, i)
                for i in self.numeric_features + [self.target]
            ],
            index=self.numeric_features + [self.target],
        )
    )


def distribution_fit(self, data, numeric_features):
    """
    x is a column_name
    """
    shapiro_values = shapiro(data[numeric_features])
    test_indication = True if shapiro_values[1] > 0.05 else False

    distribution_types = ["norm", "expon", "logistic", "gumbel"]
    # anderson_values = anderson(automl.data[numeric_column], dist=i)

    return {
        "Shapiro-Wilks_Test_Statistic": shapiro_values[0],
        "Shapiro-Wilks_p_Value": shapiro_values[1],
        "Normal distribution ?": test_indication
        # "Anderson_Darling_Test_Statistic_Normal": anderson_values[0][0],
    }

def correlation_report(self, threshold=0.95):
    corr_matrix = self.data[[self.target] + self.numeric_features].corr()
    upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))
    highly_correlated_features = [
        column for column in upper.columns if any(upper[column] > threshold)
    ]
    sns.heatmap(corr_matrix)
    if highly_correlated_features:
        print(f"Highly Correlated features are {highly_correlated_features}")
    else:
        print("No Features are correlated above the threshold")


def fit_svd(df):
    svd = TruncatedSVD()
    svd.fit(df)
    return svd


def svd_transform(svd, df, name, tiny_db):
    data = svd.transform(df).T
    x = [float(ii) for ii in data[0]]
    y = [float(ii) for ii in data[1]]
    tiny_db.insert({"chunk": f"svd-{name}", "x": x, "y": y})
    return svd.transform(df)


def spectral_clustering(df):
    s = SpectralClustering()
    s.fit()
